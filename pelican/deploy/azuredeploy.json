{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "resourceName": {
      "type": "string",
      "defaultValue":"Pelican-cluster",
      "metadata": {
        "description": "The name of the Managed Cluster resource."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The Azure location of the AKS resource."
      }
    },
    "dnsPrefix": {
      "type": "string",
      "defaultValue": "Pelican-dns",
      "metadata": {
        "description": "Optional DNS prefix to use with hosted Kubernetes API server FQDN."
      }
    },
    "osDiskSizeGB": {
      "defaultValue": 100,
      "minValue": 0,
      "maxValue": 1023,
      "type": "int",
      "metadata": {
        "description": "Disk size (in GB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
      }
    },
    "agentCount": {
      "defaultValue": 1,
      "minValue": 1,
      "maxValue": 50,
      "type": "int",
      "metadata": {
        "description": "The number of agent nodes for the cluster. Production workloads have a recommended minimum of 3."
      }
    },
    "agentVMSize": {
      "defaultValue": "Standard_D8s_v3",
      "type": "string",
      "metadata": {
        "description": "The size of the Virtual Machine."
      }
    },
    "osType": {
      "defaultValue": "Linux",
      "allowedValues": [
        "Linux"
      ],
      "type": "string",
      "metadata": {
        "description": "The type of operating system."
      }
    },
    "kubernetesVersion": {
      "defaultValue": "1.19.10",
      "type": "string",
      "metadata": {
        "description": "The version of Kubernetes."
      }
    },
    "enableHttpApplicationRouting": {
      "defaultValue": false,
      "type": "bool",
      "metadata": {
        "description": "boolean flag to turn on and off of http application routing"
      }
    },
    "networkPlugin": {
      "allowedValues": [
        "azure",
        "kubenet"
      ],
      "defaultValue": "azure",
      "type": "string",
      "metadata": {
        "description": "Network plugin used for building Kubernetes network."
      }
    },
    "maxPods": {
      "defaultValue": 30,
      "type": "int",
      "metadata": {
        "description": "Maximum number of pods that can run on a node."
      }
    },
    "enableRBAC": {
      "defaultValue": true,
      "type": "bool",
      "metadata": {
        "description": "boolean flag to turn on and off of RBAC"
      }
    },
    "virtualNetworkNewOrExisting": {
      "type": "string",
      "metadata": {
        "description": "Boolean indicating whether the VNet is new or existing"
      }
    },
    "virtualNetworkAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "VNet address prefix"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "defaultValue":"Vnet",
      "metadata": {
        "description": "Name of the VNET that will contain this AKS deployment."
      }
    },
    "VnetResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Name of the VNET resource group"
      }
    },
    "subnetName": {
      "type": "string",
      "defaultValue": "subNet",
      "metadata": {
        "description": "Subnet name that will contain the App Service Environment"
      }
    },
    "subnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "Subnet address prefix"
      }
    }
  },
  "variables": {
    "vnetId": {
      "new": "[resourceId('Microsoft.Network/virtualNetworks',parameters('virtualNetworkName'))]",
      "existing": "[resourceId(parameters('VnetResourceGroup'),'Microsoft.Network/virtualNetworks',parameters('virtualNetworkName'))]"
    },
    "vnetSubnetId": "[concat(variables('vnetId')[parameters('virtualNetworkNewOrExisting')],'/subnets/',parameters('subnetName'))]"
  },
  "resources": [
    {
      "comments": "*** Creates a virtual network if user wants to create a new Vnet ***",
      "condition": "[equals(parameters('virtualNetworkNewOrExisting'),'new')]",
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-05-01",
      "name": "[parameters('virtualNetworkName')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('virtualNetworkAddressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[parameters('subnetName')]",
            "properties": {
              "addressPrefix": "[parameters('subnetAddressPrefix')]"
            }
          }
        ]
      }
    },
    {
      "comments": "*** Creates an AKS cluster in provided Resource Group ***",
      "type": "Microsoft.ContainerService/managedClusters",
      "name": "[parameters('resourceName')]",
      "apiVersion": "2020-07-01",
      "location": "[parameters('location')]",
      "properties": {
        "kubernetesVersion": "[parameters('kubernetesVersion')]",
        "enableRBAC": "[parameters('enableRBAC')]",
        "dnsPrefix": "[parameters('dnsPrefix')]",
        "addonProfiles": {
          "httpApplicationRouting": {
            "enabled": "[parameters('enableHttpApplicationRouting')]"
          }
        },
        "agentPoolProfiles": [
          {
            "name": "agentpool",
            "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
            "count": "[parameters('agentCount')]",
            "vmSize": "[parameters('agentVMSize')]",
            "osType": "[parameters('osType')]",
            "storageProfile": "ManagedDisks",
            "vnetSubnetID": "[variables('vnetSubnetID')]",
            "maxPods": "[parameters('maxPods')]",
            "mode" : "System"
          }
        ],
        "networkProfile": {
          "networkPlugin": "[parameters('networkPlugin')]"
        }
      },
      "identity": {
        "type": "SystemAssigned"
      }
    }
  ],
  "outputs": {
    "controlPlaneFQDN": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.ContainerService/managedClusters', parameters('resourceName'))).fqdn]"
    }
  }
}
